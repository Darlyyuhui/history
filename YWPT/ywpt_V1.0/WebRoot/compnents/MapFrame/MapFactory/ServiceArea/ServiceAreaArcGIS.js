/** * 服务区分析ArcGIS实现 * @author ZLT */MapFactory.Define("MapFactory/ServiceArea",[	"MapFactory/ServiceAreaAPI*",	"MapFactory/MapManager",	"esri/tasks/ServiceAreaParameters*",	"esri/tasks/ServiceAreaTask*",	"MapFactory/GeometryUtil",	"esri/tasks/FeatureSet*",	"esri/graphic*",	"MapFactory/GeometryType*",	"MapFactory/Message*"],function(api,mapManager,serviceParams,serviceTask,geoUtil,fSetClass,graphicClass,geoType,messageClass){	return function(){		var _url = "",			_facilitiesF = new fSetClass(),			_pointBarriersF = new fSetClass(),			_polylineBarriersF = new fSetClass(),			_polygonBarriersF = new fSetClass(),			_times = [],			_geoUtil = geoUtil(),			_mapManager = mapManager();		function setUrl(url){			_url = url;		}		function setFacilities(geoArr){			var gArr = [];			for(var i=0,len=geoArr.length;i<len;i++){				gArr.push(new graphicClass(_geoUtil.convertFromMapFactory(geoArr[i])));			}			_facilitiesF.features = gArr;		}		function setBarriers(geoArr){			var pointGraphicArr = [],				polylineGraphicArr = [],				polygonGraphicArr = [];			for(var i=0,len=geoArr.length;i<len;i++){				var _geo = MapFactory.JSON.Parse(geoArr[i]),					_graphic = new graphicClass(_geoUtil.convertFromMapFactory(_geo));				switch(geo.type){					case geoType.POINT : {						pointGraphicArr.push(_graphic);						break;					}					case geoType.POLYLINE : {						polylineGraphicArr.push(_graphic);						break;					}					case geoType.POLYGON : {						polygonGraphicArr.push(_graphic);						break;					}				}			}			_pointBarriersF.features = pointGraphicArr;			_polylineBarriersF.features = polylineGraphicArr;			_polygonBarriersF.features = polygonGraphicArr;		}		function setBreaks(times){			_times = times;		}		function execute(successFunc,failureFunc){			if(!_url){				if(failureFunc){					failureFunc(new messageClass({						message : "没有设置链接"					}));				}			}			var _st = new serviceTask(_url),				_sp = new serviceParams();			_sp.facilities = _facilitiesF;			_sp.pointBarriers = _pointBarriersF;			_sp.polylineBarriers = _polylineBarriersF;			_sp.polygonBarriers = _polygonBarriersF;			_sp.defaultBreaks = _times;			_sp.outSpatialReference = _mapManager.getSpatialReferenceCode();			_st.solve(_sp,function(serviceAreaSolveResult){				var saPolygonsG = serviceAreaSolveResult.serviceAreaPolygons,					saPolylinesG = serviceAreaSolveResult.serviceAreaPolylines,					polygons = [],					polylines = [];				for(var i=0,polygonsLen=saPolygonsG.length;i<polygonsLen;i++){					polygons.push(_geoUtil.convertFromObject(saPolygonsG[i].geometry));				}				for(var j=0,polylinesLen=saPolylinesG.length;j<polylinesLen;j++){					polylines.push(_geoUtil.convertFromObject(saPolylinesG[j].geometry));				}				successFunc({					serviceAreaPolygons : polygons,					serviceAreaPolylines : polylines				});			},function(){				if(failureFunc){					failureFunc(new messageClass({						message : "服务区查询失败"					}));				}			});		}		return eval(MapFactory.GenerateAPI(api));	}});