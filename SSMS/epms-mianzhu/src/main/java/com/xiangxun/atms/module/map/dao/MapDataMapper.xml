<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiangxun.atms.module.map.dao.MapDataMapper" >

  <resultMap id="DataCountMap" type="com.xiangxun.atms.module.map.vo.LandCount" >
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="PH" property="ph" jdbcType="DECIMAL" />
    <result column="CD" property="cd" jdbcType="DECIMAL" />
    <result column="ACD" property="acd" jdbcType="DECIMAL" />
  </resultMap>
  
  <resultMap id="LandRegAnalysis" type="com.xiangxun.atms.module.reg.vo.LandReg" >
    <result column="CODE" property="code" jdbcType="VARCHAR" />
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="DEPTH" property="depth" jdbcType="VARCHAR" />
    <result column="SAMPLING_TYPE" property="samplingType" jdbcType="VARCHAR" />
    <result column="LONGITUDE" property="longitude" jdbcType="DECIMAL" />
    <result column="LATITUDE" property="latitude" jdbcType="DECIMAL" />
    <result column="SAMPLING_TIME" property="samplingTime" jdbcType="TIMESTAMP" />
    <result column="SAMPLING_USER" property="samplingUser" jdbcType="VARCHAR" />
    <result column="SAMPLING_SOURCE" property="samplingSource" jdbcType="VARCHAR" />
    <result column="PH" property="ph" jdbcType="DECIMAL" />
    <result column="CADMIUM" property="cadmium" jdbcType="DECIMAL" />
    <result column="AVAILABLE_CADMIUM" property="availableCadmium" jdbcType="DECIMAL" />
    <result column="A_DEPT" property="analysisDept" jdbcType="VARCHAR" />
    <result column="REGION_ID" property="regionId" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="AirRegAnalysis" type="com.xiangxun.atms.module.reg.vo.AirReg" >
  	<result column="CODE" property="code" jdbcType="VARCHAR" />
    <result column="CONTAINER_VOLUME" property="containerVolume" jdbcType="VARCHAR" />
    <result column="COLLECT_VOLUME" property="collectVolume" jdbcType="VARCHAR" />
    <result column="POINT_ID" property="pointId" jdbcType="VARCHAR" />
    <result column="SAMPLING_TIME" property="samplingTime" jdbcType="TIMESTAMP" />
    <result column="SAMPLING_USER" property="samplingUser" jdbcType="VARCHAR" />
    <result column="SAMPLING_SOURCE" property="samplingSource" jdbcType="VARCHAR" />
    <result column="CADMIUM" property="cadmium" jdbcType="DECIMAL" />
    <result column="A_DEPT" property="analysisDept" jdbcType="VARCHAR" />
    <result column="LONGITUDE" property="longitude" jdbcType="DECIMAL" />
    <result column="LATITUDE" property="latitude" jdbcType="DECIMAL" />
    <result column="REGION_ID" property="regionId" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="AreaCount" type="com.xiangxun.atms.module.map.vo.AreaCount" >
    <result column="WR_AREA" property="wrArea" jdbcType="DECIMAL" />
    <result column="TOTAL_AREA" property="totalArea" jdbcType="DECIMAL" />
    <result column="REPAIR_AREA" property="repairArea" jdbcType="DECIMAL" />
  </resultMap>
  
  <resultMap id="LandAnalysisCount" type="com.xiangxun.atms.module.map.vo.LandAnalysisCount" >
  	<result column="REG_TOTAL" property="regTotal" jdbcType="BIGINT" />
    <result column="MIN_PH" property="minPh" jdbcType="DOUBLE" />
    <result column="MAX_PH" property="maxPh" jdbcType="DOUBLE" />
    <result column="AVG_PH" property="avgPh" jdbcType="DOUBLE" />
    <result column="STDEV_PH" property="stdevPh" jdbcType="DOUBLE" />
    <result column="BY_PH" property="byPh" jdbcType="DOUBLE" />
    <result column="MIN_CD" property="minCd" jdbcType="DOUBLE" />
    <result column="MAX_CD" property="maxCd" jdbcType="DOUBLE" />
    <result column="AVG_CD" property="avgCd" jdbcType="DOUBLE" />
    <result column="STDEV_CD" property="stdevCd" jdbcType="DOUBLE" />
    <result column="BY_CD" property="byCd" jdbcType="DOUBLE" />
    <result column="CB_CD" property="cbCd" jdbcType="DOUBLE" />
    <result column="MIN_ACD" property="minACd" jdbcType="DOUBLE" />
    <result column="MAX_ACD" property="maxACd" jdbcType="DOUBLE" />
    <result column="AVG_ACD" property="avgACd" jdbcType="DOUBLE" />
    <result column="STDEV_ACD" property="stdevACd" jdbcType="DOUBLE" />
    <result column="BY_ACD" property="byACd" jdbcType="DOUBLE" />
  </resultMap>
  
  <resultMap id="RepairCount" type="com.xiangxun.atms.module.map.vo.RepairCount">
  	<result column="REG_TOTAL" property="regTotal" jdbcType="BIGINT" />
    <result column="AVG_PH" property="avgPh" jdbcType="DOUBLE" />
    <result column="AVG_CD" property="avgCd" jdbcType="DOUBLE" />
    <result column="CB_CD" property="cbCd" jdbcType="DOUBLE" />
    <result column="AVG_ACD" property="avgACd" jdbcType="DOUBLE" />
    <result column="PH_LV" property="phLv" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="RepairProject" type="com.xiangxun.atms.module.map.vo.RepairProject">
  	<result column="ID" property="id" jdbcType="VARCHAR" />
    <result column="CODE" property="code" jdbcType="VARCHAR" />
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="AREA" property="area" jdbcType="DECIMAL" />
    <result column="REGION_ID" property="regionId" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="getLandCount" statementType="CALLABLE" resultMap="DataCountMap" >
  	{CALL getMapCountByRegionId(
    	#{regionId,mode=IN,jdbcType=VARCHAR}
    	, #{beginTime,mode=IN,jdbcType=VARCHAR}
    	, #{endTime,mode=IN,jdbcType=VARCHAR}
    )}
  </select>
  
  <select id="getRegTypeCount" statementType="CALLABLE" resultType="map" >
  	{CALL getMapTypeCountByRegionId(
    	#{regionId,mode=IN,jdbcType=VARCHAR}
    	, #{beginTime,mode=IN,jdbcType=VARCHAR}
    	, #{endTime,mode=IN,jdbcType=VARCHAR}
    )}
  </select>
  
  <select id="getLandReg" resultMap="LandRegAnalysis">
  	SELECT T.CODE, T.NAME, T.DEPTH, T.SAMPLING_TYPE, T.LONGITUDE, T.LATITUDE
	, T.SAMPLING_TIME, T.SAMPLING_USER, T.SAMPLING_SOURCE
	, A.PH, A.CADMIUM, A.AVAILABLE_CADMIUM, A.DEPT AS A_DEPT, [dbo].getRegionIdByMissionId(T.MISSION_ID) AS REGION_ID
	FROM T_SAMPLING_LAND_REG T 
	LEFT JOIN T_ANALYSIS_LAND A ON A.REG_ID = T.ID
	<include refid="RegWhere"/>
  </select>
  
  <sql id="RegWhere">
  	<where>
  		AND T.CHECK_STATUS = 1
  		<if test="@Ognl@isNotEmpty(beginTime)" >
			AND T.SAMPLING_TIME <![CDATA[>=]]> #{beginTime,jdbcType=VARCHAR}
	    </if>
	    <if test="@Ognl@isNotEmpty(endTime)" >
			AND T.SAMPLING_TIME <![CDATA[<=]]> #{endTime,jdbcType=VARCHAR}
	    </if>
  	</where>
  </sql>
  
  <select id="getAirReg" resultMap="AirRegAnalysis">
  	SELECT T.CODE, T.CONTAINER_VOLUME, T.COLLECT_VOLUME, T.POINT_ID, AP.LONGITUDE, AP.LATITUDE
	, T.SAMPLING_TIME, T.SAMPLING_USER, T.SAMPLING_SOURCE
	, A.CADMIUM, A.DEPT AS A_DEPT, [dbo].getRegionIdByMissionId(T.MISSION_ID) AS REGION_ID
	FROM T_SAMPLING_AIR_REG T 
	LEFT JOIN T_ANALYSIS_AIR A ON A.REG_ID = T.ID
	LEFT JOIN T_AIR_POINT AP ON AP.ID = T.POINT_ID
	<include refid="RegWhere"/>
  </select>
  
  <select id="getMapIndexLandAreaCount" resultMap="AreaCount">
  	SELECT SUM(CASE WHEN T.TYPE_CODE = '01' THEN T.AREA ELSE 0 END) AS WR_AREA
	, SUM(T.AREA) AS TOTAL_AREA
	, SUM(CASE WHEN [dbo].getLBRepairStatusById(T.ID) = 2 THEN T.AREA ELSE 0 END) AS REPAIR_AREA
	FROM T_LAND_BLOCK T
  </select>
  
  <select id="getLandListByIndexMap" resultMap="LandAnalysisCount">
  	SELECT TT.REG_TOTAL
  	, ROUND(TT.MIN_PH, 2) AS MIN_PH, ROUND(TT.MAX_PH, 2) AS MAX_PH, ROUND(TT.AVG_PH, 2) AS AVG_PH
  	, ROUND(TT.STDEV_PH, 2) AS STDEV_PH, ROUND(TT.BY_PH, 2) AS BY_PH
  	
  	, ROUND(TT.MIN_CD, 2) AS MIN_CD, ROUND(TT.MAX_CD, 2) AS MAX_CD, ROUND(TT.AVG_CD, 2) AS AVG_CD
  	, ROUND(TT.STDEV_CD, 2) AS STDEV_CD, ROUND(TT.BY_CD, 2) AS BY_CD, ROUND(TT.CB_CD, 2) AS CB_CD
  	
  	, ROUND(TT.MIN_ACD, 2) AS MIN_ACD, ROUND(TT.MAX_ACD, 2) AS MAX_ACD, ROUND(TT.AVG_ACD, 2) AS AVG_ACD
  	, ROUND(TT.STDEV_ACD, 2) AS STDEV_ACD, ROUND(TT.MIN_PH, 2) AS BY_ACD
  FROM (
	  	SELECT COUNT(T.R_CODE) AS REG_TOTAL
	  		, MIN(T.PH) AS MIN_PH, MAX(T.PH) AS MAX_PH, AVG(T.PH) AS AVG_PH, STDEV(T.PH) AS STDEV_PH, STDEV(T.PH)/AVG(T.PH) * 100 AS BY_PH
			
			, MIN(T.CADMIUM) AS MIN_CD, MAX(T.CADMIUM) AS MAX_CD, AVG(T.CADMIUM) AS AVG_CD
			, STDEV(T.CADMIUM) AS STDEV_CD, STDEV(T.CADMIUM)/AVG(T.CADMIUM) * 100 AS BY_CD
			, SUM(CASE WHEN T.CADMIUM > 0.3 THEN 1 ELSE 0 END) / CAST(ROUND(COUNT(T.CADMIUM),2) AS NUMERIC(10,2)) * 100 AS CB_CD
			
			, MIN(T.AVAILABLE_CADMIUM) AS MIN_ACD, MAX(T.AVAILABLE_CADMIUM) AS MAX_ACD
			, AVG(T.AVAILABLE_CADMIUM) AS AVG_ACD, STDEV(T.AVAILABLE_CADMIUM) AS STDEV_ACD
			, STDEV(T.AVAILABLE_CADMIUM)/AVG(T.AVAILABLE_CADMIUM) * 100 AS BY_ACD
		FROM V_ANALYSIS_LAND T
		<where>
	  	  <if test="@Ognl@isNotEmpty(regionId)" >
		     AND T.REGION_ID = #{regionId,jdbcType=VARCHAR}
	      </if>
	      <if test="@Ognl@isNotEmpty(beginTime)" >
		     AND T.SAMPLING_TIME <![CDATA[>=]]> #{beginTime,jdbcType=VARCHAR}
	      </if>
	      <if test="@Ognl@isNotEmpty(endTime)" >
	         AND T.SAMPLING_TIME <![CDATA[<=]]> #{endTime,jdbcType=VARCHAR}
	      </if>
	      AND T.DC_STATUS <![CDATA[<>]]> 3
	  	</where>
	) TT
  </select>
  
  
  <select id="getRepairCount" resultMap="RepairCount">
	SELECT TT.AVG_CD, TT.AVG_PH, TT.AVG_ACD, TT.CB_CD, [dbo].getLevel(TT.AVG_PH, '001') AS PH_LV, TT.REG_TOTAL
	FROM (
	SELECT
		AVG(T.CADMIUM) AS AVG_CD, AVG(T.PH) AS AVG_PH, AVG(T.AVAILABLE_CADMIUM) AS AVG_ACD
		, SUM(CASE WHEN T.CADMIUM > 0.3 THEN 1 ELSE 0 END) / CAST(ROUND(COUNT(T.CADMIUM),2) AS NUMERIC(10,2)) * 100 AS CB_CD
		, COUNT(T.R_CODE) AS REG_TOTAL
		FROM
			V_ANALYSIS_LAND T
		WHERE
		EXISTS (
			SELECT 1 FROM T_LAND_SAMPLING_SCHEME S
			WHERE S.ID = T.SCHEME_ID
			AND EXISTS (
			  SELECT 1 FROM T_LAND_REPAIR_BLOCK_LINK L
				WHERE L.BLOCK_ID = S.BLOCK_ID AND L.PRO_ID = #{proId,jdbcType=VARCHAR}
			)
			AND S.REPAIR_SCHEDULE = #{scheduleCode,jdbcType=VARCHAR}
			<if test="@Ognl@isNotEmpty(beginTime)" >
		     AND T.SAMPLING_TIME <![CDATA[>=]]> #{beginTime,jdbcType=VARCHAR}
	        </if>
	        <if test="@Ognl@isNotEmpty(endTime)" >
	         AND T.SAMPLING_TIME <![CDATA[<=]]> #{endTime,jdbcType=VARCHAR}
	        </if>
	        AND T.DC_STATUS <![CDATA[<>]]> 3
		)
	) TT 
  </select>
  
  <select id="getRepairLandBlock" resultType="map">
  	SELECT T.BLOCK_ID FROM T_LAND_REPAIR_BLOCK_LINK T WHERE T.PRO_ID = #{proId,jdbcType=VARCHAR}
  </select>
  
  <select id="getRepairProjects" resultMap="RepairProject">
  	SELECT T.ID, T.CODE, T.NAME, T.AREA, T.REGION_ID
	FROM T_LAND_REPAIR_PROJECT T
	ORDER BY T.BEGIN_TIME DESC
  </select>
  
</mapper>